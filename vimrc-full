vim9script

# This is the actual Vim configuration file. It's intended for getting
# sourced by the vimrc. vimrc must provide a clean environment and an
# existing runtime directory.

# **NOTE**: This file is divided into sections, section can be divided
# into subsection. There are dependencies between sections, subsections
# and constructs. Order matters!

# --------

# Options.

# Copy indent from current line when starting a new line.
set autoindent

# Reread files changed outside Vim when they are unchanged inside Vim.
# Ask otherwise. Requires focus tracking for best results.
set autoread

# Allow backspace in insert mode to traverse end of line markers, start
# of the current inserts and characters added by autoindent.
set backspace=eol,indent,start

# Sane default for the build-in completion. See ':help complete'.
# May be overwritten for distinct filestypes or by plugins.
set complete=.^5,b^2,w^2,u^2,U^2

# Options for insert mode completion. See ':help completeopt'.
set completeopt=fuzzy,menuone,noselect

# Use not-so-unsafe encryption.
set cryptmethod=blowfish2

# Source .exrc, .gvimrc and .vimrc file in the current directory.
set exrc

# Define how automatic formatting is done. See ':help fo-table'.
set formatoptions=roctqnj

# Don't unload abandoned buffers.
set hidden

# Highlight all matches of the previous search pattern. While typing
# a search command, show where the pattern, as it was typed so far,
# matches.
set hlsearch
set incsearch

# Softwrap long lines at a character in 'breakat' rather than at the
# last character that fits on the screen.
set linebreak

# Enable list mode. See ':help listchars'.
set list
set listchars=lead:·,multispace:·,tab:\|\ \,trail:·

# Some filetype plugins overwrite 'foldmethod'. Ensure that in such
# cases all foldings are open by default.
set nofoldenable

# Several commands move the cursor to the first non-blank character of
# a line. Try to keep the cursor in the same column instead.
set nostartofline

# Show relative line numbers.
set number
set relativenumber

# Keep 5 lines above and below the cursor.
set scrolloff=5

# What to add to session scripts. See ':help sessionoptions'.
set sessionoptions=blank,buffers,curdir,folds,localoptions,options
set sessionoptions+=resize,tabpages,unix,winsize,winpos,globals

# Show the last command in the command line until it's overwritten.
set showcmd

# When a bracket is inserted, briefly highlight the matching one.
set showmatch

# One tab accounts for 4 whitespaces. Tabs are smart, e.g. tabs and
# whitespaces are inserted as necessary. Tabs are preferred.
set shiftwidth=4
set softtabstop=-1
set tabstop=4

# Hardwrap lines at 72 characters.
set textwidth=72

# Thesaurus files for English and German.
set thesaurus=$MYVIMDIR/pack/dictionaries/start/thesaurus/thesaurus-de.txt
set thesaurus+=$MYVIMDIR/pack/dictionaries/start/thesaurus/thesaurus-en.txt

# Limit the timeout for mapped key sequences to 10 milliseconds.
set ttimeoutlen=10

# Use a visual bell instead of beeping.
set visualbell

# Options for command line completion. See ':help wildoptions'.
set wildoptions=fuzzy,pum

# --------

# Session persistence.

# Save the undo history to a file.
set undofile

# Keep the undo history inside the runtime directory.
if !isdirectory($MYVIMDIR .. "/runtime/undo")
	call mkdir($MYVIMDIR .. "/runtime/undo", "p")
endif
set undodir=$MYVIMDIR/runtime/undo

# ----

# What to save in the viminfo file. See ':help viminfo'.
set viminfo='128,/128,:128,@128,h,s1024

# Keep the viminfo file inside the runtime directory.
set viminfofile=$MYVIMDIR/runtime/viminfo

# --------

# Spellchecker.

# German dictionary as default.
set spelllang=de

# Keep the dictionary for custom words inside the runtime directory.
if !isdirectory($MYVIMDIR .. "/runtime/spell")
	call mkdir($MYVIMDIR .. "/runtime/spell", "p")
endif
set spellfile=$MYVIMDIR/runtime/spell/custom.utf-8.add

# Mappings to toggle the spellchecker and it's language.
nnoremap <Leader>ss :setlocal spell!<cr>
nnoremap <Leader>se :setlocal spelllang=en_us<cr>
nnoremap <Leader>sd :setlocal spelllang=de<cr>

# --------

# Statusline.

# Returns the current spell checker language.
def g:SpellState(): string
	return &spell ? ',' .. &spelllang : ''
enddef

# ----

# Always show the statusline in all windows.
set laststatus=2

# Contents of the status line. See ':help statusline'.
set statusline=%<\ ≡\ %n∶\ %f\ (%R%M%Y%{SpellState()})\ %=W:%{wordcount().words}\ P∶%c%Vx%l/%L(%P)\ 

# --------

# Syntax and filetype detection.

# Enable syntax highlighting.
syntax on

# Enable file type detection. Load filetype and indention plugins.
filetype plugin indent on

# --------

# Terminal (and GUI).

# **NOTE**: This section assumes that Vim is either running as gvim or
# under tmux on top a modern terminal with full support for truecolor,
# colored undercurls, etc. All other terminals may degrade in one way
# or another.

if has("gui_running")
	if has("gui_win32") || has("gui_win64")
		# Consolas it of high quality and available since Windows Vista.
		set guifont=Consolas:h11:cANSI:qDRAFT

		# Render through DirectX for better render quality. Options are
		# dependent on the Windows version, the driver, etc. For good
		# results they must be set explicitly. There are taken from:
		# https://www.reddit.com/r/vim/comments/2ex6kh/set_renderoptions_windows/
		set renderoptions=type:directx,gamma:1.5,contrast:0.5:,
					\ geom:1,renmode:5,taamode:1,level:0.5
	else
		# Kiwi Mono as  font on everything which is not Windows.
		set guifont=Kiwi\ Mono\ 11
	endif

	# Disable the menu and symbol bars
	:set guioptions-=T
	:set guioptions-=m

	# Disable the scrollbars.
	:set guioptions-=L
	:set guioptions-=r

	# Allow external tools to display dynamic information based on where
	# the mouse is pointing.
	set ballooneval

	# Disable cursor blinking.
	set guicursor+=a:blinkon0
else
	# Force Vim to treat tmux like xterm with modifyOtherKeys set to 2.
	# tmux has supported this mode since 3.5. While not as good as the
	# more modern Kitty keyboard protocol, it modifies the Alt key to
	# work without escape sequences, separating it from 'timeoutlen'.
	# Additionally it allows complex binding key combinations which are
	# indistinguishable otherwise. Shift + CTRL is an example.
	# See ':h modifyOtherKeys'.
	set keyprotocol=tmux:mok2,screen:mok2

	# Enable the mouse.
	set mouse=a

	# Cursor shape:
	#  * Bar in insert mode.
	#  * Underline in replacement mode.
	#  * Block in all other modes.
	&t_SI = "\<Esc>[6 q"
	&t_SR = "\<Esc>[4 q"
	&t_EI = "\<Esc>[2 q"

	# Depending on the systems tercap / terminfo setting some or all
	# escape sequences might not be needed. See ':h tmux-integration'.
	if (&term =~ "tmux") || (&term =~ "screen")
		# Enable bracketed paste. See ':help xterm-bracketed-paste'
		&t_BE = "\<Esc>[?2004h"
		&t_BD = "\<Esc>[?2004l"
		&t_PS = "\<Esc>[200~"
		&t_PE = "\<Esc>[201~"

		# Force support for colored undercurls.
		&t_Cs = "\<Esc>[4:3m"
		&t_Ce = "\<Esc>[4:0m"
		&t_8u = "\<Esc>[58;2;%lu;%lu;%lum"

		# Enable focus event tracking. See ':help xterm-focus-event'
		&t_fe = "\<Esc>[?1004h"
		&t_fd = "\<Esc>[?1004l"
		execute "set <FocusGained>=\<Esc>[I"
		execute "set <FocusLost>=\<Esc>[O"

		# Force support for truecolor.
		&t_8f = "\e[38;2;%lu;%lu;%lum"
		&t_8b = "\e[48;2;%lu;%lu;%lum"
		set termguicolors

		# tmux has support for the SGR mouse protocol, but for some
		# reason Vim defaults to the inferior xterm protocol.
		set ttymouse=sgr
	endif

	# Allow external tools to display dynamic information based on where
	# the mouse is pointing.
	set balloonevalterm
endif

# --------

# Colorscheme.

# Many colorschemes support colored undercurls for the spellchecker in
# the GUI but disable them in the terminal. This is caused by colored
# undercurls being a rather obscure feature until recently. Work around
# that by overriding the spell checker highlight groups when either the
# GUI is running (for colorschemes not supporting colored undercurls at
# all) and when 'termguicolors' is enabled. 'termguicolors' indicates a
# modern terminal.
def OverrideSpellHighlights()
	if has("gui_running") || &termguicolors
		hi SpellBad guifg=NONE guiBG=NONE gui=undercurl ctermfg=NONE
					\ ctermbg=NONE cterm=undercurl
		hi SpellCap guifg=NONE guiBG=NONE gui=undercurl ctermfg=NONE
					\ ctermbg=NONE cterm=undercurl
		hi SpellLocal guifg=NONE guiBG=NONE gui=undercurl ctermfg=NONE
					\ ctermbg=NONE cterm=undercurl
		hi SpellRare guifg=NONE guiBG=NONE gui=undercurl ctermfg=NONE
					\ ctermbg=NONE cterm=undercurl
	endif
enddef

augroup vimrc
	autocmd ColorScheme * call OverrideSpellHighlights()
augroup END

# ----

# Load the colorscheme.
set background=dark
colorscheme PaperColor

# --------

# Miscellaneous settings.

# Don't load netrw, we have better plugins for that.
g:loaded_netrw = 1
g:loaded_netrwPlugin = 1

# Enable bundles plugins:
#  * Comment the selected lines on 'gc'.
#  * Briefly highlight yanked text.
packadd comment
packadd hlyank

# --------

# Autocompletion.

# Enables autocompletion for the current buffer.
def g:EnableAutocompletion()
	b:autocompletionEnabled = true
enddef

# Disabled autocompletion for the current buffer.
def g:DisableAutocompletion()
	b:autocompletionEnabled = false
enddef

# Toggles autocompletion for the current buffer.
def g:ToggleAutocompletion()
	if !exists("b:autocompletionEnabled") || !b:autocompletionEnabled
		b:autocompletionEnabled = true
	else
		b:autocompletionEnabled = false
	endif
enddef

# ----

# Disables TextChangedI events for 1 milliseconds. That is a not so evil
# hack to prevent autocompletion getting triggered by user interactions
# with the completions menu. From https://github.com/vim/vim/pull/17065
def SkipTextChangedIEvent(): string
	set eventignore+=TextChangedI
	timer_start(1, (_) => {
		set eventignore-=TextChangedI
	})
	return ''
enddef

# Triggers insert mode autocompletion. Called on TextChangedI events.
# When there are non-whitespace characters on the left side of the
# cursor, completion is triggered by feeding <c-n> into the type ahead
# buffer. Code from https://github.com/vim/vim/pull/17065
def InsComplete()
	# Abort if autocompletion is unconfigured or disabled.
	if !exists("b:autocompletionEnabled") || !b:autocompletionEnabled
		return
	endif

	if getcharstr(1) == '' && getline('.')->strpart(0, col('.') - 1) =~ '\k$'
		SkipTextChangedIEvent()
		feedkeys("\<c-n>", "n")
	endif
enddef

augroup vimrc
	# Enable autocompletion by default for some filetypes.
	autocmd FileType cmake,conf,dosini,make,sh,bash g:EnableAutocompletion()

	# Trigger autocompletion when in insert mode and the buffer changes.
	autocmd TextChangedI * InsComplete()
augroup END

# ----

# Prevent completion getting triggered when aborting completion mode.
inoremap <silent> <c-e> <c-r>=<SID>SkipTextChangedIEvent()<cr><c-e>

# Select next suggestion on <tab>.
inoremap <silent><expr> <tab> pumvisible() ? "\<c-n>" : "\<tab>"

# Select previous suggestion on <s-tab>
inoremap <silent><expr> <s-tab> pumvisible() ? "\<c-p>" : "\<s-tab>"

# Trigger autocompletion and select the next suggestion.
inoremap <silent><expr> <C-Space> "\<c-n>"

# Toggle autocompletions.
nnoremap <silent> <Leader>c :call g:ToggleAutocompletion()<CR>

# --------

# Autocommands.

augroup vimrc
	# When opening a file, restore the cursor position:
	#  * The position is saved in the viminfo file.
	#  * This is executed before determining the file type.
	autocmd BufReadPost *
				\ if line("'\"") > 1 && line("'\"") <= line("$") |
				\   exe "normal! g`\"" |
				\ endif

	# Reset the cursor to position 1x1 for commit messages.
	autocmd FileType gitcommit autocmd! BufEnter COMMIT_EDITMSG
				\ call setpos('.', [0, 1, 1, 0])

	# Don't continue C / C++ // comments in the next line.
	autocmd FileType c,cpp setlocal comments-=://

	# Detect Markdown frontmatters as comments.
	autocmd FileType markdown syntax match Comment /\%^\s*---\_.\{-}---$/
augroup END

# --------

# Mappings.

# \ is hard to reach on many keyboard layouts, rebind leader to space.
map <space> <leader>

# ----

# Highlight all occurrences of the word under the cursor.
nnoremap <Leader>hh :set hls<CR>:exec "let @/='\\<".expand("<cword>")."\\>'"<CR>

# Remove all highlights.
nnoremap <Leader>hc :nohls<CR>

# Toggle list mode.
nnoremap <Leader>l :set list!<CR>

# Toggle paste mode.
nnoremap <Leader>p :set paste!<CR>

# ----

# Toggle 'colorcolumn'.
def g:ToggleColorColumn()
	if &colorcolumn != ''
		setlocal colorcolumn&
	else
		setlocal colorcolumn=+1
	endif
enddef
nnoremap <silent> <Leader>w :call g:ToggleColorColumn()<CR>
