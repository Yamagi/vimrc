*vim-ccls.txt*  Extension for the ccls language server.
*vim-ccls*

==============================================================================
CONTENTS                                                   *vim-ccls-contents*

    Introduction..................|vim-ccls-introduction|
    Installation..................|vim-ccls-installation|
    Options.......................|vim-ccls-options|
      g:ccls_close_on_jump........|g:ccls_close_on_jump|
      g:ccls_levels...............|g:ccls_levels|
      g:ccls_size.................|g:ccls_size|
      g:ccls_position.............|g:ccls_position|
      g:ccls_orientation..........|g:ccls_orientation|
      g:ccls_float_width..........|g:ccls_float_width|
      g:ccls_float_height.........|g:ccls_float_height|
      g:ccls_log_file.............|g:ccls_log_file|
      g:ccls_quiet................|g:ccls_quiet|
    Commands......................|vim-ccls-commands|
      CclsVars....................|CclsVars|
      CclsMembers.................|CclsMembers|
      CclsMemberFunctions.........|CclsMemberFunctions|
      CclsMemberTypes.............|CclsMemberTypes|
      CclsMemberHierarchy.........|CclsMemberHierarchy|
      CclsMemberFunctionHierarchy.|CclsMemberFunctionHierarchy|
      CclsMemberTypeHierarchy.....|CclsMemberTypeHierarchy|
      CclsBase....................|CclsBase|
      CclsDerived.................|CclsDerived|
      CclsBaseHierarchy...........|CclsBaseHierarchy|
      CclsDerivedHierarchy........|CclsDerivedHierarchy|
      CclsCallers.................|CclsCallers|
      CclsCallees.................|CclsCallees|
      CclsCallHierarchy...........|CclsCallHierarchy|
      CclsCalleeHierarchy.........|CclsCalleeHierarchy|
    Mappings......................|vim-ccls-mappings|
    License.......................|vim-ccls-license|


==============================================================================
INTRODUCTION                                           *vim-ccls-introduction*

Language Server extension supporting additional, non-standard features of ccls,
such as calls and hierarchies.

This plugin does not implement a Language Server client, instead it relies on an
existing LSP client, adding on top of it the ccls-specific features. Currently
supported LSP clients are:
* ALE                   (https://github.com/w0rp/ale)
* coc.nvim              (https://github.com/neoclide/coc.nvim)
* LanguageClient-neovim (https://github.com/autozimu/LanguageClient-neovim)
* nvim-lspconfig        (https://github.com/neovim/nvim-lspconfig)
* vim-lsc               (https://github.com/natebosch/vim-lsc)
* vim-lsp               (https://github.com/prabirshrestha/vim-lsp)

==============================================================================
INSTALLATION                                           *vim-ccls-installation*

This plugin is implemented in pure VimScript, and it can be installed with
any plugin manager.

In order for this plugin to work, the ccls language server
(https://github.com/MaskRay/ccls) must be installed and provided with a working
configuration for the project
(https://github.com/MaskRay/ccls/wiki/Project-Setup).

One of the supported Language Server client plugins listed in
|vim-ccls-introduction| needs to be installed and properly configured with
ccls as language server in order for it to work.

To install ccls and set up a project to use it in combination with one of the
supported LSP clients, follow the instructions in the ccls wiki:
* https://github.com/MaskRay/ccls/wiki/ALE
* https://github.com/MaskRay/ccls/wiki/coc.nvim
* https://github.com/neovim/nvim-lspconfig#ccls
* https://github.com/MaskRay/ccls/wiki/LanguageClient-neovim
* https://github.com/MaskRay/ccls/wiki/vim-lsc
* https://github.com/MaskRay/ccls/wiki/vim-lsp

==============================================================================
Options                                                     *vim-ccls-options*

g:ccls_close_on_jump                                    *g:ccls_close_on_jump*
    Type: |Number|
    Default: `0`

    Automatically close the Yggdrasil tree window when jumping to a symbol
    location.

    Example:
>
    " Automatically close tree window when jumping
    let g:ccls_close_on_jump = 1
<

g:ccls_levels                                                *g:sp_ccls_levels*
    Type: |Number|
    Default: `1`

    Set the number of levels fetched for each request when building a
    hierarchy tree. Trees are built lazily, and only nodes with depth within
    this value are retrieved, while nodes at a deeper location are retrieved
    as-needed, when expanding a sub-tree containing them.

    Setting a small value implies more requests when opening subtrees, while
    setting a large value could lead to slowness when creating big trees (e.g.
    when working on very large codebases).

    Example:
>
    " Fetch nodes up to 5 levels deep for each request
    let g:ccls_levels = 5
<

g:ccls_size                                                      *g:ccls_size*
    Type: |Number|
    Default: `50`

    Size of the Yggdrasil window opened when showing a hierarchy tree.
    The size could be rows or columns, depending on whether the window is
    horizontal or vertical (see |g:ccls_orientation|).

    Example:
>
    " Set a size of 40 for the window
    let g:ccls_size = 40
<

g:ccls_position                                              *g:ccls_position*
    Type: |String|
    Default: `topleft`

    Specify the position of the Yggrdrasil tree window. Accepted values are
    'topleft' (top left of the window) and 'botright' (bottom right).

    Example:
>
    " Place the tree windows on the bottom right on opening
    let g:ccls_position = 'botright'
<

g:ccls_orientation                                        *g:ccls_orientation*
    Type: |String|
    Default: `vertical`

    Specify the orientation of the Yggrdrasil tree window ('horizontal' or
    'vertical').

    Example:
>
    " Create horizontal tree windows
    let g:ccls_orientation = 'horizontal'
<

g:ccls_float_width                                        *g:ccls_float_width*
    Type: |Number|
    Default: `50`

    Specify the width of the floating window for hierarchy trees (Neovim
    only: |api-window|).

    Example:
>
    " Set a width of 40 for the floating window
    let g:ccls_float_width = 40
<

g:ccls_float_height                                      *g:ccls_float_height*
    Type: |Number|
    Default: `20`

    Specify the height of the floating window for hierarchy trees (Neovim
    only: |api-window|).

    Example:
>
    " Set a height of 20 for the floating window
    let g:ccls_float_width = 20
<

g:ccls_log_file                                              *g:ccls_log_file*
    Type: |String|
    Default: not set

    If set, enables logging and specifies the location of the log file.

    Example:
>
    let g:ccls_log_file = expand('~/my_log_file.txt')
<

g:ccls_quiet                                                    *g:ccls_quiet*
    Type: |Number|
    Default: 0

    If nonzero, do not echo messages unless they are warnings.

    Example:
>
    let g:ccls_quiet = 1
<

==============================================================================
Commands                                                   *vim-ccls-commands*

Hierarchy commands support an optional parameter (Neovim only) to open
the resulting tree in a floating window.

CclsBase                                                            *CclsBase*

Get a list of base classes for the symbol under the cursor.

CclsBaseHierarchy [-float]                                 *CclsBaseHierarchy*

Get a tree of inheritance ancestors for the symbol under cursor.

CclsDerived                                                      *CclsDerived*

Get a list of derived classes for the symbol under the cursor.

CclsDerivedHierarchy [-float]                           *CclsDerivedHierarchy*

Get a tree of inheritance descendants for the symbol under cursor.

CclsCallers                                                      *CclsCallers*

Get a list of functions calling the function under the cursor.

CclsCallHierarchy [-float]                                 *CclsCallHierarchy*

Get a hierarchy of functions calling the function under the cursor.

CclsCallees                                                      *CclsCallees*

Get a list of functions called by the function under the cursor.

CclsCalleeHierarchy [-float]                             *CclsCalleeHierarchy*

Get a hierarchy of functions called by the function under the cursor.

CclsMembers                                                      *CclsMembers*

Get a lists of members for the symbol under cursor.

CclsMemberFunctions                                      *CclsMemberFunctions*

Get a lists of function members for the symbol under cursor.

CclsMemberTypes                                              *CclsMemberTypes*

Get a lists of nested types for the symbol under cursor.

CclsMemberHierarchy [-float]                             *CclsMemberHierarchy*

Get a tree of members for the symbol under cursor.

CclsMemberFunctionHierarchy [-float]             *CclsMemberFunctionHierarchy*

Get a tree of function members for the symbol under cursor.

CclsMemberTypeHierarchy [-float]                     *CclsMemberTypeHierarchy*

Get a tree of nested types for the symbol under cursor.

CclsVars                                                            *CclsVars*

Get a list of document variables.

==============================================================================
Mappings                                                   *vim-ccls-mappings*

A set of <plug> mappings are exposed to control the Yggdrasil buffers used to
display hierarchy trees. See |yggdrasil-mappings|.

==============================================================================
License                                                     *vim-ccls-license*

This software is distributed under the MIT License.

Full license: https://github.com/m-pilia/vim-ccls/blob/master/LICENSE
