Before:
  source test/utils.vim
  let b:tmp_dir = has('win32') ? expand('%TEMP%\') : '/tmp/'
  let b:ccls_log_file = b:tmp_dir . 'vim_ccls.log'
  let b:warning_text = 'This is a warning'
  let b:message_text = 'This is a message'

After:
  if exists('b:ccls_log_file')
    call system((has('win32') ? 'del ' : 'rm -f ') . b:ccls_log_file)
  endif

  unlet! b:tmp_dir
  unlet! b:ccls_log_file
  unlet! g:ccls_log_file
  unlet! b:warning_text
  unlet! b:message_text
  unlet! g:ccls_quiet
  unlet! args
  unlet! file_content
  unlet! result
  unlet! message_list

Execute(Test ccls#util#log with log file set):
  let args = ['aaa', 'bbb', {'ccc': 'ddd'}]

  let g:ccls_log_file = b:ccls_log_file
  call ccls#util#log(args[0], args[1], args[2])

  Assert filereadable(b:ccls_log_file)

  let file_content = readfile(g:ccls_log_file)
  let result = matchlist(file_content, '\v.* \| (.*)')[1]

  AssertEqual json_encode(args), result

Execute(Test ccls#util#log with log file not set):
  unlet! g:ccls_log_file

  call ccls#util#log('foo')

  Assert !filereadable(b:ccls_log_file)

Execute(Test ccls#util#warning):
  call ccls#util#warning(b:warning_text)

  let message_list = GetMessages()

  AssertEqual 'vim-ccls: ' . b:warning_text, message_list[-1]

Execute(Test ccls#util#message with g:ccls_quiet = 0):

  let g:ccls_quiet = 0

  call ccls#util#message(b:message_text)

  let message_list = GetMessages()

  AssertEqual 'vim-ccls: ' . b:message_text, message_list[-1]

Execute(Test ccls#util#message with g:ccls_quiet = 1):

  let g:ccls_quiet = 1

  let message_list = GetMessages()

  call ccls#util#message(b:message_text)

  AssertEqual message_list, GetMessages()
